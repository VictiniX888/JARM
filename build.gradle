buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

version = "1.1.1"
def ENV = System.getenv()
if (ENV.DRONE_BUILD_NUMBER) {
    version += ".build" + ENV.DRONE_BUILD_NUMBER
}
def getWorkingBranch() {
    def workingBranch = """git --git-dir=${rootDir}/.git
                               --work-tree=${rootDir}
                               rev-parse --abbrev-ref HEAD""".execute().text.trim()
    print "Working branch: " + workingBranch
    return workingBranch
}
if (getWorkingBranch() != "master") {
    version += "-" + getWorkingBranch()
}
group= "victinix.jarm" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "jarm"

minecraft {
    version = "1.7.10-10.13.4.1448-1.7.10"
    runDir = "eclipse"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'src'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
    archives sourceJar
    archives deobfJar
}

repositories {
    maven {
		name = "chickenbones"
		url = 'http://chickenbones.net/maven/'
	}
}

dependencies {
    compile ccc
    compile nei
    compile cclib
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

apply plugin: 'idea'
idea {
    module {
        inheritOutputDirs = true
    }
}
